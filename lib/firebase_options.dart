// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError('Web is not configured. Run FlutterFire CLI.');
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError('macOS not configured.');
      case TargetPlatform.windows:
        throw UnsupportedError('Windows not configured.');
      case TargetPlatform.linux:
        throw UnsupportedError('Linux not configured.');
      default:
        throw UnsupportedError('Unsupported platform.');
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: _req('FIREBASE_API_KEY_ANDROID'),
    appId: _req('FIREBASE_APP_ID_ANDROID'),
    messagingSenderId: _req('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: _req('FIREBASE_PROJECT_ID'),
    storageBucket: _req('FIREBASE_STORAGE_BUCKET'),
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: _req('FIREBASE_API_KEY_IOS'),
    appId: _req('FIREBASE_APP_ID_IOS'),
    messagingSenderId: _req('FIREBASE_MESSAGING_SENDER_ID'),
    projectId: _req('FIREBASE_PROJECT_ID'),
    storageBucket: _req('FIREBASE_STORAGE_BUCKET'),
    iosBundleId: _req('FIREBASE_IOS_BUNDLE_ID'),
  );

  static String _req(String key) {
    final v = dotenv.env[key];
    if (v == null || v.isEmpty) {
      throw ArgumentError('Missing $key in .env');
    }
    return v;
  }
}
